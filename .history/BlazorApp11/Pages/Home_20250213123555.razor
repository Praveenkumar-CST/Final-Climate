@page "/"

@using System.Net.Http.Json
@using Blazored.LocalStorage
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage

<PageTitle>Weather Prediction</PageTitle>

<style>
    body {
        background: url('/mn.jpg') no-repeat center center fixed;
        background-size: cover;
        height: 100vh;
        margin: 0;
        overflow: hidden;
    }
</style>

<div class="flex flex-col items-center p-6 min-h-screen text-white">
    <h1 class="text-4xl font-bold mb-6 shadow-lg p-2 rounded text-white bg-black bg-opacity-50">🌦 Weather Prediction 🌤</h1>
    <div class="flex gap-2 mb-6">
        <input @bind="city" placeholder="Enter city" class="p-3 border rounded-md shadow-md text-black" />
        <button @onclick="GetWeather" class="bg-yellow-500 hover:bg-yellow-600 text-white px-6 py-2 rounded-md shadow-lg">Get Weather</button>
        <button @onclick="AddToFavorites" class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-md shadow-lg">❤️ Fav</button>
    </div>

    @if (!string.IsNullOrEmpty(weather))
    {
        <div class="bg-black bg-opacity-50 p-6 rounded-lg shadow-xl text-center w-80 mb-4">
            <p class="text-xl font-semibold text-white">@weather</p>
        </div>
    }
    
    @if (forecast.Any())
    {
        <div class="bg-black bg-opacity-50 p-6 rounded-lg shadow-xl text-center w-full max-w-3xl">
            <h2 class="text-2xl font-bold mb-4">5-Day Forecast</h2>
            <div class="grid grid-cols-2 sm:grid-cols-5 gap-4">
                @foreach (var day in forecast)
                {
                    <div class="bg-white bg-opacity-20 p-4 rounded-lg shadow-md text-center">
                        <p class="font-semibold">@day.Date</p>
                        <p>@day.Temp°C</p>
                        <p>@day.Weather</p>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    private string city = "";
    private string weather = "";
    private List<string> favoriteCities = new();
    private List<WeatherForecast> forecast = new();

    protected override async Task OnInitializedAsync()
    {
        favoriteCities = await LocalStorage.GetItemAsync<List<string>>("favorites") ?? new List<string>();
    }

    private async Task GetWeather()
    {
        if (!string.IsNullOrEmpty(city))
        {
            var http = new HttpClient();
            var apiKey = "027e44160659370f158944e22e8f23aa";
            var response = await http.GetStringAsync($"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={apiKey}&units=metric");
            var json = System.Text.Json.JsonDocument.Parse(response);
            var cityName = json.RootElement.GetProperty("name").GetString();
            var temp = json.RootElement.GetProperty("main").GetProperty("temp").GetDouble();
            weather = $"{cityName}: {temp}°C";
            
            await GetForecast();
        }
    }

    private async Task GetForecast()
    {
        var http = new HttpClient();
        var apiKey = "027e44160659370f158944e22e8f23aa";
        var response = await http.GetStringAsync($"https://api.openweathermap.org/data/2.5/forecast?q={city}&appid={apiKey}&units=metric");
        var json = System.Text.Json.JsonDocument.Parse(response);
        
        forecast = json.RootElement.GetProperty("list")
            .EnumerateArray()
            .Where((item, index) => index % 8 == 0)
            .Take(5)
            .Select(item => new WeatherForecast
            {
                Date = item.GetProperty("dt_txt").GetString(),
                Temp = item.GetProperty("main").GetProperty("temp").GetDouble(),
                Weather = item.GetProperty("weather")[0].GetProperty("description").GetString()
            }).ToList();
    }

    private async Task AddToFavorites()
    {
        if (!string.IsNullOrEmpty(city) && !favoriteCities.Contains(city))
        {
            favoriteCities.Add(city);
            await LocalStorage.SetItemAsync("favorites", favoriteCities);
        }
    }

    private class WeatherForecast
    {
        public string Date { get; set; }
        public double Temp { get; set; }
        public string Weather { get; set; }
    }
}
