@page "/welcome"

<h1>Welcome</h1>

<div>
    <h2>Sign In</h2>
    <EditForm Model="@signInModel" OnValidSubmit="@HandleSignIn">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label for="email">Email:</label>
            <InputText id="email" @bind-Value="signInModel.Email" class="form-control" />
            <ValidationMessage For="@(() => signInModel.Email)" />
        </div>
        <div class="form-group">
            <label for="password">Password:</label>
            <InputPassword id="password" @bind-Value="signInModel.Password" class="form-control" />
            <ValidationMessage For="@(() => signInModel.Password)" />
        </div>
        <button type="submit" class="btn btn-primary">Sign In</button>
        @if (signInError != null)
        {
            <div class="alert alert-danger mt-2">@signInError</div>
        }
    </EditForm>


    <h2>Sign Up</h2>
    <EditForm Model="@signUpModel" OnValidSubmit="@HandleSignUp">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label for="signUpEmail">Email:</label>
            <InputText id="signUpEmail" @bind-Value="signUpModel.Email" class="form-control" />
            <ValidationMessage For="@(() => signUpModel.Email)" />
        </div>
        <div class="form-group">
            <label for="signUpPassword">Password:</label>
            <InputPassword id="signUpPassword" @bind-Value="signUpModel.Password" class="form-control" />
            <ValidationMessage For="@(() => signUpModel.Password)" />
        </div>
          <div class="form-group">
            <label for="confirmPassword">Confirm Password:</label>
            <InputPassword id="confirmPassword" @bind-Value="signUpModel.ConfirmPassword" class="form-control" />
            <ValidationMessage For="@(() => signUpModel.ConfirmPassword)" />
        </div>
        <button type="submit" class="btn btn-primary">Sign Up</button>
        @if (signUpError != null)
        {
            <div class="alert alert-danger mt-2">@signUpError</div>
        }
    </EditForm>
</div>


@code {
    private SignInModel signInModel = new();
    private SignUpModel signUpModel = new();
    private string? signInError;
    private string? signUpError;

    private async Task HandleSignIn()
    {
        signInError = null; // Clear any previous errors
        try
        {
            // Simulate API call (Replace with actual Supabase/Auth call)
            // Example using Supabase.Client:
            // var response = await supabaseClient.Auth.SignIn(signInModel.Email, signInModel.Password);

            // In a real application, you would make a call to your authentication
            // service (e.g., Supabase Auth) here.  This is a placeholder.
            await Task.Delay(500); // Simulate a short delay
            if (signInModel.Email == "test@example.com" && signInModel.Password == "password") // Example Credentials
            {
                // Successful sign-in.  Redirect or update UI as needed.
                Console.WriteLine("Sign in Successful!");
                // Example: NavigationManager.NavigateTo("/protectedpage");
            }
            else
            {
                signInError = "Invalid email or password.";
            }

        }
        catch (Exception ex)
        {
            signInError = "An error occurred during sign in: " + ex.Message;
        }
    }

    private async Task HandleSignUp()
    {
        signUpError = null; // Clear previous errors
        if (signUpModel.Password != signUpModel.ConfirmPassword)
        {
            signUpError = "Passwords do not match.";
            return;
        }

        try
        {
            // Simulate API call (Replace with actual Supabase/Auth call)
            // Example using Supabase.Client:
            // var response = await supabaseClient.Auth.SignUp(signUpModel.Email, signUpModel.Password);
            await Task.Delay(500); // Simulate a short delay
            Console.WriteLine("Sign up Successful!");
            // Handle successful sign-up (e.g., redirect, show confirmation message)
        }
        catch (Exception ex)
        {
            signUpError = "An error occurred during sign up: " + ex.Message;
        }
    }

    public class SignInModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;
    }

    public class SignUpModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;

         [Required(ErrorMessage = "Confirm Password is required")]
        [Compare("Password", ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}
