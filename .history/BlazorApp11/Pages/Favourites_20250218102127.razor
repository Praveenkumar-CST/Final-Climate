@page "/favorites"
@using Blazored.LocalStorage
@inject ILocalStorageService LocalStorage
@inject NavigationManager Navigation

<PageTitle>Favorites</PageTitle>

<style>
    body {
        background: url('/mn.jpg') no-repeat center center fixed;
        background-size: cover;
        height: 100vh;
        margin: 0;
        overflow: hidden;
    }
    .fav-container {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        justify-content: center;
        padding: 20px;
    }
    .fav-item {
        background: rgba(0, 0, 0, 0.7);
        color: white;
        padding: 20px;
        border-radius: 12px;
        text-align: center;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
        transition: transform 0.3s;
        width: 220px;
    }
    .fav-item:hover {
        transform: scale(1.05);
    }
    .fav-date {
        font-size: 18px;
        font-weight: bold;
        margin-bottom: 8px;
    }
    .fav-temp {
        font-size: 22px;
        font-weight: bold;
        margin-bottom: 6px;
        color: #FFD700;
    }
    .fav-weather {
        font-size: 16px;
        text-transform: capitalize;
    }
    .remove-btn {
        margin-top: 10px;
        background: red;
        padding: 8px 12px;
        border-radius: 6px;
        cursor: pointer;
        transition: 0.3s;
    }
    .remove-btn:hover {
        background: darkred;
    }
</style>

<div class="flex flex-col items-center p-6 min-h-screen text-white">
    <h1 class="text-4xl font-bold mb-6 shadow-lg p-2 rounded text-white bg-black bg-opacity-50">❤️ Favorite Cities</h1>
    <button @onclick="GoBack" class="bg-blue-500 hover:bg-blue-600 text-white px-6 py-2 rounded-md shadow-lg mb-6">⬅ Back</button>

    @if (favoriteCities.Any())
    {
        <div class="fav-container">
            @foreach (var city in favoriteCities)
            {
                <div class="fav-item">
                    <p class="fav-date">@city</p>
                    <button @onclick="() => RemoveFromFavorites(city)" class="remove-btn">Remove</button>
                </div>
            }
        </div>
    }
    else
    {
        <p class="text-white text-lg">No favorite cities added yet.</p>
    }

    @if (weather != null)
    {
        <div class="fav-weather">
            <h3>Current Weather</h3>
            <p class="fav-temp">Temperature: @weather.Temperature °C</p>
            <p>Condition: @weather.Condition</p>
        </div>
    }
    else
    {
        <p>No weather data available.</p>
    }
</div>

@code {
    private List<string> favoriteCities = new();
    private Weather? weather = null;  // Nullable weather property

    // Structure to hold weather data (without a separate class)
    private class Weather
    {
        public int Temperature { get; set; }
        public string Condition { get; set; }
    }

    // Called when the component is initialized
    protected override async Task OnInitializedAsync()
    {
        // Load favorite cities from LocalStorage
        favoriteCities = await LocalStorage.GetItemAsync<List<string>>("favorites") ?? new List<string>();

        // Simulate fetching weather data (mocked)
        weather = await GetWeatherDataAsync();
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/");
    }

    private async Task AddToFavorites(string city)
    {
        favoriteCities.Add(city);
        await LocalStorage.SetItemAsync("favorites", favoriteCities);
    }

    private async Task RemoveFromFavorites(string city)
    {
        favoriteCities.Remove(city);
        await LocalStorage.SetItemAsync("favorites", favoriteCities);
    }

    // Simulate fetching weather data
    private async Task<Weather?> GetWeatherDataAsync()
    {
        await Task.Delay(1000);  // Simulate a delay for data fetching
        return new Weather
        {
            Temperature = 25,  // Mocked temperature
            Condition = "Sunny"  // Mocked condition
        };
    }
}
