@page "/"

@using System.Net.Http.Json
@using Blazored.LocalStorage
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage

<PageTitle>Weather Prediction</PageTitle>

<style>
    body {
        background: url('/mn.jpg') no-repeat center center fixed;
        background-size: cover;
        height: 100vh;
        margin: 0;
        overflow: hidden;
    }
    /* ... other styles ... */
</style>

<div class="flex flex-col items-center p-6 min-h-screen text-white">
    <h1 class="text-4xl font-bold mb-6 shadow-lg p-2 rounded text-white bg-black bg-opacity-50">🌦 Weather Prediction 🌤</h1>

    <div class="flex gap-2 mb-6">
        <input @bind="city" placeholder="Enter city" class="p-3 border rounded-md shadow-md text-black" />
        <button @onclick="GetWeather" class="bg-yellow-500 hover:bg-yellow-600 text-white px-6 py-2 rounded-md shadow-lg">Get Weather</button>
        <button @onclick="AddToFavorites" class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-md shadow-lg">❤️ Fav</button>
    </div>

    @if (!string.IsNullOrEmpty(weather))
    {
        <div class="city-weather">
            <p class="city-name">@weather</p>
            <p class="temperature">@weatherTemp°C</p>
        </div>
    }

    @if (forecast.Any())
    {
        <div class="forecast-container">
            @foreach (var day in forecast)
            {
                <div class="forecast-item">
                    <p class="forecast-date">@day.Date</p>
                    <p class="forecast-temp">@day.Temp°C</p>
                    <p class="forecast-weather">@day.Weather</p>
                </div>
            }
        </div>
    }

    @if (isAdded)
    {
        <p class="history-message">City added to favorites!</p>
    }

    <div class="mt-6">
        <h2 class="text-2xl font-bold text-white">Favorite Cities History</h2>
        @if (favoriteCities.Any())
        {
            <ul class="list-none mt-4 text-white">
                @foreach (var city in favoriteCities)
                {
                    <li>@city</li>
                }
            </ul>
        }
        else
        {
            <p>No cities in history yet.</p>
        }
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <p class="search-message">@errorMessage</p>
    }
</div>

@code {
    private string city = "";
    private string weather = "";
    private string weatherTemp = "";
    private List<string> favoriteCities = new();
    private List<WeatherForecast> forecast = new();
    private bool isAdded = false;
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        favoriteCities = await LocalStorage.GetItemAsync<List<string>>("favorites") ?? new List<string>();
    }

    private async Task GetWeather()
    {
        if (!string.IsNullOrEmpty(city))
        {
            try
            {
                var http = new HttpClient();
                var apiKey = "027e44160659370f158944e22e8f23aa";
                var response = await http.GetStringAsync($"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={apiKey}&units=metric");

                var json = System.Text.Json.JsonDocument.Parse(response);
                var cityName = json.RootElement.GetProperty("name").GetString();
                var temp = json.RootElement.GetProperty("main").GetProperty("temp").GetDouble();
                weather = $"{cityName}";
                weatherTemp = temp.ToString("0.0");

                await GetForecast();
            }
            catch
            {
                errorMessage = "City not found. Please try again!";
            }
        }
    }

    private async Task GetForecast()
    {
        var http = new HttpClient();
        var apiKey = "027e44160659370f158944e22e8f23aa";
        var response = await http.GetStringAsync($"https://api.openweathermap.org/data/2.5/forecast?q={city}&appid={apiKey}&units=metric");
        var json = System.Text.Json.JsonDocument.Parse(response);

        forecast = json.RootElement.GetProperty("list")
            .EnumerateArray()
            .Where((item, index) => index % 8 == 0)
            .Take(5)
            .Select(item => new WeatherForecast
            {
                Date = item.GetProperty("dt_txt").GetString().Split(' ')[0],
                Temp = item.GetProperty("main").GetProperty("temp").GetDouble(),
                Weather = item.GetProperty("weather")[0].GetProperty("description").GetString()
            })
            .ToList();
    }

    private async Task AddToFavorites()
    {
        if (!string.IsNullOrEmpty(city) && !favoriteCities.Contains(city))
        {
            favoriteCities.Add(city);
            await LocalStorage.SetItemAsync("favorites", favoriteCities);
            isAdded = true;
            StateHasChanged(); // Refresh the page to show the success message
        }
    }

    private class WeatherForecast
    {
        public string Date { get; set; }
        public double Temp { get; set; }
        public string Weather { get; set; }
    }
}
