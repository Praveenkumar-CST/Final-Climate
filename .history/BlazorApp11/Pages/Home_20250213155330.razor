@page "/"
@using System.Net.Http.Json
@using Blazored.LocalStorage
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage

<PageTitle>Weather Prediction</PageTitle>

<style>
    /* Set the background image for the entire page */
    body {
        background-image: url('mn.jpg');
        background-size: cover;
        background-position: center;
        margin: 0;
        height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
        font-family: 'Arial', sans-serif;
        color: white;
    }

    /* Content container for structured layout */
    .content-container {
        background: rgba(0, 0, 0, 0.6);
        padding: 30px;
        border-radius: 15px;
        width: 80%;
        max-width: 600px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        text-align: center;
    }

    h1 {
        font-size: 2.5em;
        font-weight: bold;
        margin-bottom: 20px;
        color: #FFD700;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-group input, .form-group button {
        padding: 10px;
        font-size: 1em;
        border-radius: 8px;
        border: 1px solid #ddd;
        width: 100%;
    }

    .form-group input {
        background-color: #fff;
        color: #333;
    }

    .form-group button {
        background-color: #3b82f6;
        color: white;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .form-group button:hover {
        background-color: #2563eb;
    }

    .forecast-container {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        justify-content: center;
        margin-top: 20px;
    }

    .forecast-item {
        background: rgba(0, 0, 0, 0.7);
        padding: 15px;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
        text-align: center;
        color: white;
        flex-basis: 30%;
    }

    .forecast-date {
        font-size: 1.1em;
        font-weight: bold;
    }

    .forecast-temp {
        font-size: 1.5em;
        margin: 10px 0;
    }

    .forecast-weather {
        font-size: 1.1em;
    }

    .message {
        font-size: 1.1em;
        margin-top: 15px;
        color: #38a169;
    }

    .error {
        color: #ef4444;
    }
</style>

<div class="content-container">
    <h1>Weather Prediction 🌦</h1>
    <div class="form-group">
        <input @bind="city" placeholder="Enter city" class="p-3 border rounded-md shadow-md text-black" />
    </div>

    <div class="form-group">
        <button @onclick="GetWeather">Get Weather</button>
        <button @onclick="AddToFavorites">Add to Favorites</button>
    </div>

    @if (!string.IsNullOrEmpty(weather))
    {
        <div class="message">
            <p>@weather</p>
        </div>
    }

    @if (forecast.Any())
    {
        <div class="forecast-container">
            @foreach (var day in forecast)
            {
                <div class="forecast-item">
                    <p class="forecast-date">@day.Date</p>
                    <p class="forecast-temp">@day.Temp°C</p>
                    <p class="forecast-weather">@day.Weather</p>
                </div>
            }
        </div>
    }

    @if (isAdded)
    {
        <div class="message">
            <p>City added to favorites!</p>
        </div>
    }

    @if (string.IsNullOrEmpty(city) && !string.IsNullOrEmpty(weather))
    {
        <div class="error">
            <p>Please enter a city to get the weather.</p>
        </div>
    }
</div>

@code {
    private string city = "";
    private string weather = "";
    private List<string> favoriteCities = new();
    private List<WeatherForecast> forecast = new();
    private bool isAdded = false;

    protected override async Task OnInitializedAsync()
    {
        favoriteCities = await LocalStorage.GetItemAsync<List<string>>("favorites") ?? new List<string>();
    }

    private async Task GetWeather()
    {
        if (!string.IsNullOrEmpty(city))
        {
            var http = new HttpClient();
            var apiKey = "027e44160659370f158944e22e8f23aa";
            var response = await http.GetStringAsync($"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={apiKey}&units=metric");
            var json = System.Text.Json.JsonDocument.Parse(response);
            var cityName = json.RootElement.GetProperty("name").GetString();
            var temp = json.RootElement.GetProperty("main").GetProperty("temp").GetDouble();
            weather = $"{cityName}: {temp}°C";
            await GetForecast();
            await SaveSearchHistory(city);
        }
        else
        {
            weather = "Please enter a city.";
        }
    }

    private async Task GetForecast()
    {
        var http = new HttpClient();
        var apiKey = "027e44160659370f158944e22e8f23aa";
        var response = await http.GetStringAsync($"https://api.openweathermap.org/data/2.5/forecast?q={city}&appid={apiKey}&units=metric");
        var json = System.Text.Json.JsonDocument.Parse(response);
        forecast = json.RootElement.GetProperty("list")
            .EnumerateArray()
            .Where((item, index) => index % 8 == 0)
            .Take(5)
            .Select(item => new WeatherForecast { Date = item.GetProperty("dt_txt").GetString().Split(' ')[0], Temp = item.GetProperty("main").GetProperty("temp").GetDouble(), Weather = item.GetProperty("weather")[0].GetProperty("description").GetString() })
            .ToList();
    }
}
