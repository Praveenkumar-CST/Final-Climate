@page "/"

@using System.Net.Http.Json
@using Blazored.LocalStorage
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage

<PageTitle>Weather Prediction</PageTitle>

<style>
    /* Fullscreen Background */
    body {
        background: url('/images/mn.jpg') no-repeat center center fixed;
        background-size: cover;
        color: white;
    }

    .container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        min-height: 100vh;
        text-align: center;
        background: rgba(0, 0, 0, 0.6);
        padding: 20px;
        border-radius: 15px;
    }

    .title {
        font-size: 3rem;
        font-weight: 900;
        background: rgba(0, 0, 0, 0.4);
        padding: 15px;
        border-radius: 15px;
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.6);
    }

    .input-section {
        display: flex;
        gap: 20px;
        margin-top: 20px;
    }

    .input-box {
        padding: 10px;
        font-size: 1.2rem;
        border-radius: 10px;
        border: none;
        outline: none;
    }

    .button {
        padding: 10px 20px;
        font-size: 1.2rem;
        border-radius: 10px;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .button:hover {
        transform: scale(1.05);
    }

    .bg-yellow {
        background: linear-gradient(135deg, #ffde00, #ff9800);
        color: black;
    }

    .bg-green {
        background: linear-gradient(135deg, #4caf50, #2e7d32);
    }

    .bg-blue {
        background: linear-gradient(135deg, #2196f3, #1e88e5);
    }

    .forecast-container {
        display: flex;
        gap: 15px;
        flex-wrap: wrap;
        justify-content: center;
        margin-top: 30px;
    }

    .forecast-item {
        background: rgba(0, 0, 0, 0.5);
        padding: 20px;
        border-radius: 15px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.5);
        width: 200px;
        text-align: center;
        color: white;
        transition: all 0.3s ease;
    }

    .forecast-item:hover {
        transform: scale(1.05);
    }

    .forecast-date {
        font-size: 1.4rem;
        font-weight: 700;
    }

    .forecast-temp {
        font-size: 2rem;
        margin: 10px 0;
    }

    .forecast-weather {
        font-size: 1.1rem;
    }

    .message {
        font-size: 1.2rem;
        color: #4caf50;
        margin-top: 20px;
        animation: slideUp 1s ease-in-out;
    }

    /* Button and toggle styles */
    .toggle-button {
        display: inline-block;
        padding: 12px;
        background-color: #111;
        border-radius: 15px;
        color: white;
        font-size: 1.1rem;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .toggle-button:hover {
        transform: scale(1.1);
        background-color: #222;
    }

    @keyframes slideUp {
        0% {
            opacity: 0;
            transform: translateY(30px);
        }
        100% {
            opacity: 1;
            transform: translateY(0);
        }
    }
</style>

<div class="container">
    <h1 class="title">🌦 Weather Prediction 🌤</h1>

    <div class="input-section">
        <input @bind="city" placeholder="Enter city" class="input-box" />
        <button @onclick="GetWeather" class="button bg-yellow">Get Weather</button>
        <button @onclick="AddToFavorites" class="button bg-green">❤️ Fav</button>
    </div>

    @if (!string.IsNullOrEmpty(weather))
    {
        <div class="bg-black bg-opacity-70 p-6 rounded-lg shadow-xl w-80 mb-4">
            <p class="text-xl font-semibold">@weather</p>
        </div>
    }

    @if (forecast.Any())
    {
        <div class="forecast-container">
            @foreach (var day in forecast)
            {
                <div class="forecast-item">
                    <p class="forecast-date">@day.Date</p>
                    <p class="forecast-temp">@day.Temp°C</p>
                    <p class="forecast-weather">@day.Weather</p>
                </div>
            }
        </div>
    }

    @if (isAdded)
    {
        <p class="message">City added to favorites!</p>
    }

    <!-- Toggle theme button -->
    <div>
        <button class="toggle-button">🌙 Toggle Dark Mode</button>
    </div>
</div>

@code {
    private string city = "";
    private string weather = "";
    private List<string> favoriteCities = new();
    private List<WeatherForecast> forecast = new();
    private bool isAdded = false;

    protected override async Task OnInitializedAsync()
    {
        favoriteCities = await LocalStorage.GetItemAsync<List<string>>("favorites") ?? new List<string>();
    }

    private async Task GetWeather()
    {
        if (!string.IsNullOrEmpty(city))
        {
            var http = new HttpClient();
            var apiKey = "027e44160659370f158944e22e8f23aa";
            var response = await http.GetStringAsync($"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={apiKey}&units=metric");
            var json = System.Text.Json.JsonDocument.Parse(response);
            var cityName = json.RootElement.GetProperty("name").GetString();
            var temp = json.RootElement.GetProperty("main").GetProperty("temp").GetDouble();
            weather = $"{cityName}: {temp}°C";
            await GetForecast();

            // Save search history to LocalStorage
            await SaveSearchHistory(city);
        }
    }

    private async Task GetForecast()
    {
        var http = new HttpClient();
        var apiKey = "027e44160659370f158944e22e8f23aa";
        var response = await http.GetStringAsync($"https://api.openweathermap.org/data/2.5/forecast?q={city}&appid={apiKey}&units=metric");
        var json = System.Text.Json.JsonDocument.Parse(response);
        forecast = json.RootElement.GetProperty("list")
            .EnumerateArray()
            .Where((item, index) => index % 8 == 0)  // Get 5-day forecast (every 8th entry corresponds to a day)
            .Take(5)
            .Select(item => new WeatherForecast
            {
                Date = item.GetProperty("dt_txt").GetString().Split(' ')[0],  // Extract date from the datetime string
                Temp = item.GetProperty("main").GetProperty("temp").GetDouble(),
                Weather = item.GetProperty("weather")[0].GetProperty("description").GetString()
            }).ToList();
    }

    private async Task AddToFavorites()
    {
        if (!string.IsNullOrEmpty(city) && !favoriteCities.Contains(city))
        {
            favoriteCities.Add(city);
            await LocalStorage.SetItemAsync("favorites", favoriteCities);
            isAdded = true;
            StateHasChanged(); // Refresh the page to show the success message
        }
    }

    private async Task SaveSearchHistory(string city)
    {
        var searchHistory = await LocalStorage.GetItemAsync<List<SearchHistoryItem>>("history") ?? new List<SearchHistoryItem>();
        searchHistory.Add(new SearchHistoryItem { City = city, DateTime = DateTime.Now });
        await LocalStorage.SetItemAsync("history", searchHistory);
    }

    private class WeatherForecast
    {
        public string Date { get; set; }
        public double Temp { get; set; }
        public string Weather { get; set; }
    }

    private class SearchHistoryItem
    {
        public string City { get; set; }
        public DateTime DateTime { get; set; }
    }
}
