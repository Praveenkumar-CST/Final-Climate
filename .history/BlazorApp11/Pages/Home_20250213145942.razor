@page "/"

@using System.Net.Http.Json
@using Blazored.LocalStorage
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage

<PageTitle>Weather Prediction</PageTitle>

<style>
    body {
        background: url('/mn.jpg') no-repeat center center fixed;
        background-size: cover;
        height: 100vh;
        margin: 0;
        overflow: hidden;
    }

    .forecast-container {
        background: transparent;
        display: flex;
        justify-content: center;
        align-items: center;
        margin-top: 20px;
        gap: 20px;
        flex-wrap: wrap;
    }

    .forecast-item {
        background: rgba(0, 0, 0, 0.7);
        color: white;
        padding: 20px;
        margin: 10px;
        border-radius: 12px;
        text-align: center;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
        transition: transform 0.3s;
        width: 180px;
    }

    .forecast-item:hover {
        transform: scale(1.1);
    }

    .forecast-date {
        font-size: 18px;
        font-weight: bold;
        margin-bottom: 8px;
    }

    .forecast-temp {
        font-size: 22px;
        font-weight: bold;
        margin-bottom: 6px;
        color: #FFD700;
    }

    .forecast-weather {
        font-size: 16px;
        text-transform: capitalize;
    }

    .city-weather {
        background: rgba(0, 0, 0, 0.6);
        padding: 20px;
        border-radius: 12px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        text-align: center;
        width: 80%;
        margin-bottom: 20px;
    }

    .city-name {
        font-size: 24px;
        font-weight: bold;
        margin-bottom: 10px;
    }

    .temperature {
        font-size: 30px;
        font-weight: bold;
        color: #FFD700;
    }

    .button-group {
        display: flex;
        gap: 10px;
        margin-bottom: 20px;
    }

    .favorite-button {
        background-color: #32CD32;
        color: white;
        border-radius: 8px;
        padding: 10px 20px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .favorite-button:hover {
        background-color: #28a745;
    }

    .history-message {
        color: #4CAF50;
        font-size: 1.2em;
    }

    .search-message {
        color: #F44336;
        font-size: 1.2em;
    }
</style>

<div class="flex flex-col items-center p-6 min-h-screen text-white">
    <h1 class="text-4xl font-bold mb-6 shadow-lg p-2 rounded text-white bg-black bg-opacity-50">🌦 Weather Prediction 🌤</h1>

    <!-- Search and Buttons -->
    <div class="button-group">
        <input @bind="city" placeholder="Enter city" class="p-3 border rounded-md shadow-md text-black" />
        <button @onclick="GetWeather" class="bg-yellow-500 hover:bg-yellow-600 text-white px-6 py-2 rounded-md shadow-lg">Get Weather</button>
        <button @onclick="AddToFavorites" class="favorite-button">❤️ Add to Favorites</button>
    </div>

    <!-- Display Current Weather -->
    @if (!string.IsNullOrEmpty(weather))
    {
        <div class="city-weather">
            <p class="city-name">@weather.City</p>
            <p class="temperature">@weather.Temp°C</p>
            <p class="forecast-weather">@weather.Description</p>
        </div>
    }

    <!-- Forecast -->
    @if (forecast.Any())
    {
        <div class="forecast-container">
            @foreach (var day in forecast)
            {
                <div class="forecast-item">
                    <p class="forecast-date">@day.Date</p>
                    <p class="forecast-temp">@day.Temp°C</p>
                    <p class="forecast-weather">@day.Weather</p>
                </div>
            }
        </div>
    }

    <!-- Success Message for Favorite -->
    @if (isAdded)
    {
        <p class="history-message">City added to favorites!</p>
    }

    <!-- Error Message if no city entered -->
    @if (string.IsNullOrEmpty(city) && isAdded == false)
    {
        <p class="search-message">Please enter a city to get the weather.</p>
    }
</div>

@code {
    private string city = "";
    private WeatherInfo weather = new WeatherInfo();
    private List<string> favoriteCities = new List<string>();
    private List<WeatherForecast> forecast = new List<WeatherForecast>();
    private bool isAdded = false;

    protected override async Task OnInitializedAsync()
    {
        favoriteCities = await LocalStorage.GetItemAsync<List<string>>("favorites") ?? new List<string>();
    }

    private async Task GetWeather()
    {
        if (!string.IsNullOrEmpty(city))
        {
            var http = new HttpClient();
            var apiKey = "027e44160659370f158944e22e8f23aa";
            var response = await http.GetStringAsync($"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={apiKey}&units=metric");
            var json = System.Text.Json.JsonDocument.Parse(response);
            var cityName = json.RootElement.GetProperty("name").GetString();
            var temp = json.RootElement.GetProperty("main").GetProperty("temp").GetDouble();
            var description = json.RootElement.GetProperty("weather")[0].GetProperty("description").GetString();
            weather = new WeatherInfo { City = cityName, Temp = temp, Description = description };
            await GetForecast();
        }
    }

    private async Task GetForecast()
    {
        var http = new HttpClient();
        var apiKey = "027e44160659370f158944e22e8f23aa";
        var response = await http.GetStringAsync($"https://api.openweathermap.org/data/2.5/forecast?q={city}&appid={apiKey}&units=metric");
        var json = System.Text.Json.JsonDocument.Parse(response);
        forecast = json.RootElement.GetProperty("list")
            .EnumerateArray()
            .Where((item, index) => index % 8 == 0)  // Every 8th entry is a new day
            .Take(5)
            .Select(item => new WeatherForecast
            {
                Date = item.GetProperty("dt_txt").GetString().Split(' ')[0],
                Temp = item.GetProperty("main").GetProperty("temp").GetDouble(),
                Weather = item.GetProperty("weather")[0].GetProperty("description").GetString()
            }).ToList();
    }

    private async Task AddToFavorites()
    {
        if (!string.IsNullOrEmpty(city) && !favoriteCities.Contains(city))
        {
            favoriteCities.Add(city);
            await LocalStorage.SetItemAsync("favorites", favoriteCities);
            isAdded = true;
            StateHasChanged(); // Refresh the page to show the success message
        }
    }

    private class WeatherInfo
    {
        public string City { get; set; }
        public double Temp { get; set; }
        public string Description { get; set; }
    }

    private class WeatherForecast
    {
        public string Date { get; set; }
        public double Temp { get; set; }
        public string Weather { get; set; }
    }
}
