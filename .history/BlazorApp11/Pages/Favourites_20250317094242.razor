@page "/favorites"
@using Blazored.LocalStorage
@inject ILocalStorageService LocalStorage

<PageTitle>Favorites</PageTitle>

<style>
body {
    background: url('/mn.jpg') no-repeat center center fixed;
    background-size: cover;
    height: 100vh;
    margin: 0;
    overflow: hidden;
}
.fav-container {
    display: flex;
    flex-wrap: wrap;
    gap: 20px;
    justify-content: center;
    padding: 20px;
}
.fav-item {
    background: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 20px;
    border-radius: 12px;
    text-align: center;
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
    transition: transform 0.3s;
    width: 220px;
}
.fav-item:hover {
    transform: scale(1.05);
}
.fav-date {
    font-size: 18px;
    font-weight: bold;
    margin-bottom: 8px;
}
.fav-temp {
    font-size: 22px;
    font-weight: bold;
    margin-bottom: 6px;
    color: #FFD700;
}
.fav-weather {
    font-size: 16px;
    text-transform: capitalize;
}
.remove-btn {
    margin-top: 10px;
    background: red;
    padding: 8px 12px;
    border-radius: 6px;
    cursor: pointer;
    transition: 0.3s;
}
.remove-btn:hover {
    background: darkred;
}
</style>

<div class="flex flex-col items-center p-6 min-h-screen text-white">
    <h1 class="text-4xl font-bold mb-6 shadow-lg p-2 rounded text-white bg-black bg-opacity-50">❤️ Favorite Cities</h1>

    @if (favoriteCities.Any())
    {
        <div class="fav-container">
            @foreach (var city in favoriteCities)
            {
                <div class="fav-item">
                    <p class="fav-date">@city</p>
                    <button @onclick="() => RemoveFromFavorites(city)" class="remove-btn">Remove</button>
                </div>
            }
        </div>
    }
    else
    {
        <p class="text-white text-lg">No favorite cities added yet.</p>
    }
</div>

@code {
    private List<string> favoriteCities = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadFavorites();
    }

    private async Task LoadFavorites()
    {
        // Load existing favorite cities from LocalStorage
        favoriteCities = await LocalStorage.GetItemAsync<List<string>>("favorites") ?? new List<string>();
        StateHasChanged(); // Update UI
    }

    public async Task AddToFavorites(string city)
    {
        // Load existing favorites
        var storedCities = await LocalStorage.GetItemAsync<List<string>>("favorites") ?? new List<string>();

        if (!storedCities.Contains(city)) // Prevent duplicates
        {
            storedCities.Add(city);
            await LocalStorage.SetItemAsync("favorites", storedCities);
            favoriteCities = storedCities; // Update UI list
            StateHasChanged(); 
        }
    }

    private async Task RemoveFromFavorites(string city)
    {
        var storedCities = await LocalStorage.GetItemAsync<List<string>>("favorites") ?? new List<string>();

        if (storedCities.Contains(city))
        {
            storedCities.Remove(city);
            await LocalStorage.SetItemAsync("favorites", storedCities);
            favoriteCities = storedCities; // Update UI list
            StateHasChanged(); 
        }
    }
}
